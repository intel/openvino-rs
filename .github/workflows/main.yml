name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    name: Check code format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - run: rustup component add rustfmt
    - run: cargo fmt --all -- --check
    # Use the `runtime-linking` feature here to avoid requiring an OpenVINO installation to be
    # present when building.
    - run: cargo clippy --features runtime-linking
    - run: cd crates/openvino-tensor-converter && cargo fmt --all -- --check

  rust_dependencies:
    name: Check Rust dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: EmbarkStudios/cargo-deny-action@v1

  # Build and test from the git-submodule-included OpenVINO source code.
  source:
    name: From source
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        lfs: true
    - name: Checkout LFS obects
      run: git lfs checkout
    - name: Install system dependencies
      run: sudo apt update && sudo apt install -y clang cmake libclang-dev gnupg2 libdrm2 libglib2.0-0 libusb-1.0-0-dev lsb-release libgtk-3-0 libtool udev unzip dos2unix
    - name: Build (openvino-sys from source)
      run: cargo build --verbose --features openvino-sys/from-source
    - name: Run tests
      # For some reason the library path is not set during the doc tests (`--doc`, see
      # https://doc.rust-lang.org/cargo/commands/cargo-test.html#target-selection) so we skip them
      # here: issue at https://github.com/intel/openvino-rs/issues/25.
      run: cargo test --verbose --features openvino-sys/from-source --lib --tests

  # Build and test from an existing OpenVINO installation inside a Docker image (i.e. download the
  # binaries, then compile against these).
  dynamic_binaries:
    name: From binaries
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu18, ubuntu20]
        version: [2020.4, 2021.1, 2021.2, 2021.3, 2021.4]
        exclude:
        - os: ubuntu20
          version: 2020.4
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        lfs: true
    - name: Checkout LFS obects
      run: git lfs checkout
    - name: Build the Docker image
      run: docker build . --tag openvino-rs:${{ matrix.OS }}-${{ matrix.version }}-$(date +%s) --build-arg OS=${{ matrix.os }} --build-arg VERSION=${{ matrix.version }}

  # Build and test from an existing OpenVINO installation inside a Docker image (i.e. download the
  # binaries, then compile against these).
  runtime_binaries:
    name: From runtime-linked binaries
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        lfs: true
    - name: Checkout LFS obects
      run: git lfs checkout
    - uses: abrown/install-openvino-action@v1
    - name: Build and run tests
      run: |
        source /opt/intel/openvino/bin/setupvars.sh
        cargo test --features openvino-sys/runtime-linking

  # Build and test from an existing OpenVINO installation inside a Docker image (i.e. download the
  # binaries, then compile against these).
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        lfs: true
    - name: Build documentation
      run: cargo doc --no-deps --features openvino-sys/runtime-linking

  # Build and test the openvino-tensor-converter tool separately from the regular library builds;
  # the OpenCV dependency is a bit fragile so the crate is not included by the default workspace
  # commands.
  converter:
    name: Converter tool
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: crates/openvino-tensor-converter
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install OpenCV
      run: sudo apt update && sudo apt install libclang-dev libopencv-dev libopencv-core4.2
    - name: Build
      run: cargo build -v
    - name: test
      run: cargo test -v

  # Re-generate the openvino-sys bindings and check if anything has changed. A failure in this step
  # indicates that we need to decide wether to commit the changes from `cargo xtask codegen`.
  codegen:
    name: Generate openvino-sys bindings
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Generate bindings
      run: cargo xtask codegen
    - name: Verify no changes
      run: git diff --ignore-submodules --no-ext-diff --name-only --exit-code
